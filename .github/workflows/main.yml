name: Create Release and Debian Package

on:
  push:
    tags:
      - 'v*' # Trigger the workflow on tags starting with 'v'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Needed to create releases and push commits

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch all history for all tags and branches, required for changelog generation
        fetch-depth: 0

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake build-essential debhelper devscripts git-buildpackage

    - name: Update Debian Changelog from Git History
      run: |
        # Set maintainer details for dch to use in the changelog
        export DEBEMAIL="actions@github.com"
        export DEBFULLNAME="GitHub Actions"
        
        # This command finds the last tag, derives the new version from the current tag,
        # and adds all commit subjects since the last tag to a new changelog entry.
        # The debian/changelog file is modified directly in the workspace for the build.
        gbp dch --auto --ignore-branch
        
        echo "Successfully updated changelog in workspace:"
        head -n 10 debian/changelog

    - name: Build Debian Package
      # This command now uses the changelog file that was just updated in the workspace
      run: dpkg-buildpackage -b -us -uc

    - name: Build the standalone application
      run: |
        mkdir build
        cd build
        cmake ..
        make

    - name: Prepare Release Artifacts
      run: |
        # Create a directory to store all assets for the release
        mkdir -p release_assets
        
        # Move the compiled executable from the build/bin directory
        mv build/bin/nepdate-cli release_assets/nepdate-cli
        
        # Find, move, and rename the generated .deb package
        ORIGINAL_DEB=$(find .. -maxdepth 1 -name "*.deb" | head -n 1)
        if [ -z "$ORIGINAL_DEB" ]; then
          echo "::error:: Debian package not found in parent directory."
          exit 1
        fi
        # Assumes format: package_version_arch.deb
        ARCH=$(basename "$ORIGINAL_DEB" | cut -d'_' -f3)
        NEW_DEB_NAME="nepdate-cli_${{ github.ref_name }}_${ARCH}"
        mv "$ORIGINAL_DEB" "release_assets/$NEW_DEB_NAME"
        echo "Renamed Debian package to: $NEW_DEB_NAME"
        
        # Create a zip archive of the source code
        git archive -o release_assets/source-code-${{ github.ref_name }}.zip HEAD
        
        # Generate checksums for the .deb file
        cd release_assets
        for file in *.deb; do
          md5sum "$file" > "${file}.md5"
          sha256sum "$file" > "${file}.sha256"
        done
        cd ..
        
        echo "Prepared assets:"
        ls -l release_assets

    - name: Create GitHub Release and Upload Artifacts
      uses: softprops/action-gh-release@v1
      with:
        # This will upload all files from the release_assets directory
        files: release_assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Commit Updated Changelog to Repository
      run: |
        # Store the updated changelog temporarily
        mv debian/changelog /tmp/changelog
        
        # Configure git user for the commit
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # The checkout is in a detached HEAD state. We need to switch to the branch.
        # Replace 'main' with your repository's default branch if it's different.
        git checkout main
        
        # Restore the updated changelog
        mv /tmp/changelog debian/changelog
        
        # Add, commit, and push the updated changelog.
        # The [skip ci] in the message prevents this commit from re-triggering the workflow.
        git add debian/changelog
        # Check if there are changes to commit to avoid an error if the file is unchanged
        if git diff --staged --quiet; then
          echo "Changelog is already up-to-date."
        else
          git commit -m "Chore: Update debian/changelog for release ${{ github.ref_name }} [skip ci]"
          git push
        fi

